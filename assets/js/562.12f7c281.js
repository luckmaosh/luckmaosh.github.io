(window.webpackJsonp=window.webpackJsonp||[]).push([[562],{1969:function(t,r,o){"use strict";o.r(r);var n=o(5),i=Object(n.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"spring-boot常见面试题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot常见面试题"}},[t._v("#")]),t._v(" Spring Boot常见面试题")]),t._v(" "),r("blockquote",[r("p",[t._v("Java面试总结汇总，整理了包括Java重点知识，以及常用开源框架，欢迎大家阅读。文章可能有错误的地方，因为个人知识有限，欢迎各位大佬指出！文章持续更新中......")])]),t._v(" "),r("blockquote",[r("table",[r("thead",[r("tr",[r("th",[t._v("ID")]),t._v(" "),r("th",[t._v("标题")]),t._v(" "),r("th",[t._v("地址")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("1")]),t._v(" "),r("td",[t._v("设计模式面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125721772039",title:"https://juejin.cn/post/6844904125721772039",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("2")]),t._v(" "),r("td",[t._v("Java基础知识面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904127059738631",title:"https://juejin.cn/post/6844904127059738631",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("3")]),t._v(" "),r("td",[t._v("Java集合面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125939843079",title:"https://juejin.cn/post/6844904125939843079",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("4")]),t._v(" "),r("td",[t._v("JavaIO、BIO、NIO、AIO、Netty面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125700784136",title:"https://juejin.cn/post/6844904125700784136",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("5")]),t._v(" "),r("td",[t._v("Java并发编程面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125755293710",title:"https://juejin.cn/post/6844904125755293710",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("6")]),t._v(" "),r("td",[t._v("Java异常面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904128959741965",title:"https://juejin.cn/post/6844904128959741965",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("7")]),t._v(" "),r("td",[t._v("Java虚拟机（JVM）面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125696573448",title:"https://juejin.cn/post/6844904125696573448",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("8")]),t._v(" "),r("td",[t._v("Spring面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904127051513864",title:"https://juejin.cn/post/6844904127051513864",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("9")]),t._v(" "),r("td",[t._v("Spring MVC面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904127059722253",title:"https://juejin.cn/post/6844904127059722253",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("10")]),t._v(" "),r("td",[t._v("Spring Boot面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125709156359",title:"https://juejin.cn/post/6844904125709156359",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("11")]),t._v(" "),r("td",[t._v("Spring Cloud面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125717544973",title:"https://juejin.cn/post/6844904125717544973",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("12")]),t._v(" "),r("td",[t._v("Redis面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904127055527950",title:"https://juejin.cn/post/6844904127055527950",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("13")]),t._v(" "),r("td",[t._v("MyBatis面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125935648776",title:"https://juejin.cn/post/6844904125935648776",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("14")]),t._v(" "),r("td",[t._v("MySQL面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904127047139335",title:"https://juejin.cn/post/6844904127047139335",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("15")]),t._v(" "),r("td",[t._v("TCP、UDP、Socket、HTTP面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125692379143",title:"https://juejin.cn/post/6844904125692379143",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("16")]),t._v(" "),r("td",[t._v("Nginx面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125784653837",title:"https://juejin.cn/post/6844904125784653837",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("17")]),t._v(" "),r("td",[t._v("ElasticSearch面试题")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("18")]),t._v(" "),r("td",[t._v("kafka面试题")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("19")]),t._v(" "),r("td",[t._v("RabbitMQ面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904125935665160",title:"https://juejin.cn/post/6844904125935665160",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("20")]),t._v(" "),r("td",[t._v("Dubbo面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904127076499463",title:"https://juejin.cn/post/6844904127076499463",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("21")]),t._v(" "),r("td",[t._v("ZooKeeper面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904127076499464",title:"https://juejin.cn/post/6844904127076499464",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("22")]),t._v(" "),r("td",[t._v("Netty面试题（总结最全面的面试题）")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("23")]),t._v(" "),r("td",[t._v("Tomcat面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904127059722247",title:"https://juejin.cn/post/6844904127059722247",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("24")]),t._v(" "),r("td",[t._v("Linux面试题（总结最全面的面试题）")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://juejin.cn/post/6844904127059738637",title:"https://juejin.cn/post/6844904127059738637",target:"_blank",rel:"noopener noreferrer"}},[t._v("juejin.cn/post/684490…"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[t._v("25")]),t._v(" "),r("td",[t._v("互联网相关面试题（总结最全面的面试题）")]),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("26")]),t._v(" "),r("td",[t._v("互联网安全面试题（总结最全面的面试题）")]),t._v(" "),r("td")])])])]),t._v(" "),r("h3",{attrs:{id:"什么是-spring-boot"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-boot"}},[t._v("#")]),t._v(" 什么是 Spring Boot？")]),t._v(" "),r("ul",[r("li",[t._v("Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，使开发者能快速上手。")])]),t._v(" "),r("h3",{attrs:{id:"为什么要用springboot"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用springboot"}},[t._v("#")]),t._v(" 为什么要用SpringBoot")]),t._v(" "),r("ul",[r("li",[t._v("快速开发，快速整合，配置简化、内嵌服务容器")])]),t._v(" "),r("h3",{attrs:{id:"springboot与springcloud-区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot与springcloud-区别"}},[t._v("#")]),t._v(" SpringBoot与SpringCloud 区别")]),t._v(" "),r("ul",[r("li",[t._v("SpringBoot是快速开发的Spring框架，SpringCloud是完整的微服务框架，SpringCloud依赖于SpringBoot。")])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-有哪些优点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-有哪些优点"}},[t._v("#")]),t._v(" Spring Boot 有哪些优点？")]),t._v(" "),r("ul",[r("li",[t._v("Spring Boot 主要有如下优点：\n"),r("ol",[r("li",[t._v("容易上手，提升开发效率，为 Spring 开发提供一个更快、更简单的开发框架。")]),t._v(" "),r("li",[t._v("开箱即用，远离繁琐的配置。")]),t._v(" "),r("li",[t._v("提供了一系列大型项目通用的非业务性功能，例如：内嵌服务器、安全管理、运行数据监控、运行状况检查和外部化配置等。")]),t._v(" "),r("li",[t._v("SpringBoot总结就是使编码变简单、配置变简单、部署变简单、监控变简单等等")])])])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-的核心注解是哪个-它主要由哪几个注解组成的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-的核心注解是哪个-它主要由哪几个注解组成的"}},[t._v("#")]),t._v(" Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。")])]),t._v(" "),r("li",[r("p",[t._v("@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项， 例如："),r("code",[t._v("java 如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。")])])]),t._v(" "),r("li",[r("p",[t._v("@ComponentScan：Spring组件扫描。")])])])])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-支持哪些日志框架-推荐和默认的日志框架是哪个"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-支持哪些日志框架-推荐和默认的日志框架是哪个"}},[t._v("#")]),t._v(" Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？")]),t._v(" "),r("ul",[r("li",[t._v("Spring Boot 支持 Java Util Logging, Log4j2, Lockback 作为日志框架，如果你使用 Starters 启动器，Spring Boot 将使用 Logback 作为默认日志框架，但是不管是那种日志框架他都支持将配置文件输出到控制台或者文件中。")])]),t._v(" "),r("h3",{attrs:{id:"springboot-starter的工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot-starter的工作原理"}},[t._v("#")]),t._v(" SpringBoot Starter的工作原理")]),t._v(" "),r("ul",[r("li",[r("p",[r("code",[t._v("我个人理解SpringBoot就是由各种Starter组合起来的，我们自己也可以开发Starter")])])]),t._v(" "),r("li",[r("p",[t._v("在sprinBoot启动时由@SpringBootApplication注解会自动去maven中读取每个starter中的spring.factories文件,该文件里配置了所有需要被创建spring容器中的bean，并且进行自动配置把bean注入SpringContext中 //（SpringContext是Spring的配置文件）")])])]),t._v(" "),r("h3",{attrs:{id:"springboot-starter-的工作原理是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot-starter-的工作原理是什么"}},[t._v("#")]),t._v(" SpringBoot Starter 的工作原理是什么？")]),t._v(" "),r("p",[t._v("SpringBoot 在启动的时候会干这几件事情：")]),t._v(" "),r("p",[t._v("1、 SpringBoot 在启动时会去依赖的 Starter 包中寻找 resources/META-INF/spring.factories 文件，然后根据文件中配置的 Jar 包去扫描项目所依赖的 Jar 包。")]),t._v(" "),r("p",[t._v("2、 根据 spring.factories 配置加载 AutoConfigure 类")]),t._v(" "),r("p",[t._v("3、 根据 @Conditional 注解的条件，进行自动配置并将 Bean 注入 Spring Context")]),t._v(" "),r("p",[t._v("总结一下，其实就是 SpringBoot 在启动的时候，按照约定去读取 SpringBoot Starter 的配置信息，再根据配置信息对资源进行初始化，并注入到 Spring 容器中。这样 SpringBoot 启动完毕后，就已经准备好了一切资源，使用过程中直接注入对应 Bean 资源即可。")]),t._v(" "),r("p",[t._v("这只是简单的三连环问答，不知道有多少同学能够完整的回答出来。")]),t._v(" "),r("h3",{attrs:{id:"spring-boot-2-x-有什么新特性-与-1-x-有什么区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-2-x-有什么新特性-与-1-x-有什么区别"}},[t._v("#")]),t._v(" Spring Boot 2.X 有什么新特性？与 1.X 有什么区别？")]),t._v(" "),r("ul",[r("li",[t._v("配置变更")]),t._v(" "),r("li",[t._v("JDK 版本升级")]),t._v(" "),r("li",[t._v("第三方类库升级")]),t._v(" "),r("li",[t._v("响应式 Spring 编程支持")]),t._v(" "),r("li",[t._v("HTTP/2 支持")]),t._v(" "),r("li",[t._v("配置属性绑定")]),t._v(" "),r("li",[t._v("更多改进与加强")])]),t._v(" "),r("h3",{attrs:{id:"springboot支持什么前端模板"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot支持什么前端模板"}},[t._v("#")]),t._v(" SpringBoot支持什么前端模板，")]),t._v(" "),r("ul",[r("li",[t._v("thymeleaf，freemarker，jsp，官方不推荐JSP会有限制")])]),t._v(" "),r("h3",{attrs:{id:"springboot的缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot的缺点"}},[t._v("#")]),t._v(" SpringBoot的缺点")]),t._v(" "),r("ul",[r("li",[t._v("我觉得是为难人，SpringBoot在目前我觉得没有什么缺点，非要找一个出来我觉得就是\n"),r("ul",[r("li",[t._v("由于不用自己做的配置，报错时很难定位。")])])])]),t._v(" "),r("h3",{attrs:{id:"运行-spring-boot-有哪几种方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#运行-spring-boot-有哪几种方式"}},[t._v("#")]),t._v(" 运行 Spring Boot 有哪几种方式？")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("打包用命令或者放到容器中运行")])]),t._v(" "),r("li",[r("p",[t._v("用 Maven/ Gradle 插件运行")])]),t._v(" "),r("li",[r("p",[t._v("直接执行 main 方法运行")])])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-需要独立的容器运行吗"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-需要独立的容器运行吗"}},[t._v("#")]),t._v(" Spring Boot 需要独立的容器运行吗？")]),t._v(" "),r("ul",[r("li",[t._v("可以不需要，内置了 Tomcat/ Jetty 等容器。")])]),t._v(" "),r("h3",{attrs:{id:"开启-spring-boot-特性有哪几种方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开启-spring-boot-特性有哪几种方式"}},[t._v("#")]),t._v(" 开启 Spring Boot 特性有哪几种方式？")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("继承spring-boot-starter-parent项目")])]),t._v(" "),r("li",[r("p",[t._v("导入spring-boot-dependencies项目依赖")])])]),t._v(" "),r("h3",{attrs:{id:"springboot-实现热部署有哪几种方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot-实现热部署有哪几种方式"}},[t._v("#")]),t._v(" SpringBoot 实现热部署有哪几种方式？")]),t._v(" "),r("ul",[r("li",[t._v("热部署就是可以不用重新运行SpringBoot项目可以实现操作后台代码自动更新到以运行的项目中")]),t._v(" "),r("li",[t._v("主要有两种方式：\n"),r("ul",[r("li",[t._v("Spring Loaded")]),t._v(" "),r("li",[t._v("Spring-boot-devtools")])])])]),t._v(" "),r("h3",{attrs:{id:"springboot事务的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot事务的使用"}},[t._v("#")]),t._v(" SpringBoot事务的使用")]),t._v(" "),r("ul",[r("li",[t._v("SpringBoot的事务很简单，首先使用注解EnableTransactionManagement开启事务之后，然后在Service方法上添加注解Transactional便可。")])]),t._v(" "),r("h3",{attrs:{id:"async异步调用方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#async异步调用方法"}},[t._v("#")]),t._v(" Async异步调用方法")]),t._v(" "),r("ul",[r("li",[t._v("在SpringBoot中使用异步调用是很简单的，只需要在方法上使用@Async注解即可实现方法的异步调用。 注意：需要在启动类加入@EnableAsync使异步调用@Async注解生效。")])]),t._v(" "),r("h3",{attrs:{id:"如何在-spring-boot-启动的时候运行一些特定的代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何在-spring-boot-启动的时候运行一些特定的代码"}},[t._v("#")]),t._v(" 如何在 Spring Boot 启动的时候运行一些特定的代码？")]),t._v(" "),r("ul",[r("li",[t._v("可以实现接口 ApplicationRunner 或者 CommandLineRunner，这两个接口实现方式一样，它们都只提供了一个 run 方法")])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-有哪几种读取配置的方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-有哪几种读取配置的方式"}},[t._v("#")]),t._v(" Spring Boot 有哪几种读取配置的方式？")]),t._v(" "),r("ul",[r("li",[t._v("Spring Boot 可以通过 @PropertySource,@Value,@Environment, @ConfigurationPropertie注解来绑定变量")])]),t._v(" "),r("h3",{attrs:{id:"什么是-javaconfig"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-javaconfig"}},[t._v("#")]),t._v(" 什么是 JavaConfig？")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Spring JavaConfig 是 Spring 社区的产品，Spring 3.0引入了他，它提供了配置 Spring IOC 容器的纯Java 方法。因此它有助于避免使用 XML 配置。使用 JavaConfig 的优点在于：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("面向对象的配置。由于配置被定义为 JavaConfig 中的类，因此用户可以充分利用 Java 中的面向对象功能。一个配置类可以继承另一个，重写它的@Bean 方法等。")])]),t._v(" "),r("li",[r("p",[t._v("减少或消除 XML 配置。基于依赖注入原则的外化配置的好处已被证明。但是，许多开发人员不希望在 XML 和 Java 之间来回切换。JavaConfig 为开发人员提供了一种纯 Java 方法来配置与 XML 配置概念相似的 Spring 容器。从技术角度来讲，只使用 JavaConfig 配置类来配置容器是可行的，但实际上很多人认为将JavaConfig 与 XML 混合匹配是理想的。")])]),t._v(" "),r("li",[r("p",[t._v("类型安全和重构友好。JavaConfig 提供了一种类型安全的方法来配置 Spring容器。由于 Java 5.0 对泛型的支持，现在可以按类型而不是按名称检索 bean，不需要任何强制转换或基于字符串的查找。")])])])]),t._v(" "),r("li",[r("p",[t._v("常用的Java config：")]),t._v(" "),r("ul",[r("li",[t._v("@Configuration：在类上打上写下此注解，表示这个类是配置类")]),t._v(" "),r("li",[t._v("@ComponentScan：在配置类上添加 @ComponentScan 注解。该注解默认会扫描该类所在的包下所有的配置类，相当于之前的 <context:component-scan >。")]),t._v(" "),r("li",[t._v('@Bean：bean的注入：相当于以前的< bean id="objectMapper" class="org.codehaus.jackson.map.ObjectMapper" />')]),t._v(" "),r("li",[t._v("@EnableWebMvc：相当于xml的<mvc:annotation-driven >")]),t._v(" "),r("li",[t._v('@ImportResource： 相当于xml的 < import resource="applicationContext-cache.xml">')])])])]),t._v(" "),r("h3",{attrs:{id:"springboot的自动配置原理是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot的自动配置原理是什么"}},[t._v("#")]),t._v(" SpringBoot的自动配置原理是什么")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("主要是Spring Boot的启动类上的核心注解SpringBootApplication注解主配置类，有了这个主配置类启动时就会为SpringBoot开启一个@EnableAutoConfiguration注解自动配置功能。")])]),t._v(" "),r("li",[r("p",[t._v("有了这个EnableAutoConfiguration的话就会：")]),t._v(" "),r("ol",[r("li",[t._v("从配置文件META_INF/Spring.factories加载可能用到的自动配置类")]),t._v(" "),r("li",[t._v("去重，并将exclude和excludeName属性携带的类排除")]),t._v(" "),r("li",[t._v("过滤，将满足条件（@Conditional）的自动配置类返回")])])])]),t._v(" "),r("h3",{attrs:{id:"你如何理解-spring-boot-配置加载顺序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#你如何理解-spring-boot-配置加载顺序"}},[t._v("#")]),t._v(" 你如何理解 Spring Boot 配置加载顺序？")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("在 Spring Boot 里面，可以使用以下几种方式来加载配置。")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("1.properties文件；")])]),t._v(" "),r("li",[r("p",[t._v("2.YAML文件；")])]),t._v(" "),r("li",[r("p",[t._v("3.系统环境变量；")])]),t._v(" "),r("li",[r("p",[t._v("4.命令行参数；")])]),t._v(" "),r("li",[r("p",[t._v("等等……")])])])])]),t._v(" "),r("h3",{attrs:{id:"什么是-yaml"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-yaml"}},[t._v("#")]),t._v(" 什么是 YAML？")]),t._v(" "),r("ul",[r("li",[t._v("YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的属性，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。")])]),t._v(" "),r("h3",{attrs:{id:"yaml-配置的优势在哪里"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yaml-配置的优势在哪里"}},[t._v("#")]),t._v(" YAML 配置的优势在哪里 ?")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("YAML 现在可以算是非常流行的一种配置文件格式了，无论是前端还是后端，都可以见到 YAML 配置。那么 YAML 配置和传统的 properties 配置相比到底有哪些优势呢？")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("配置有序，在一些特殊的场景下，配置有序很关键")])]),t._v(" "),r("li",[r("p",[t._v("简洁明了，他还支持数组，数组中的元素可以是基本数据类型也可以是对象")])]),t._v(" "),r("li",[r("p",[t._v("相比 properties 配置文件，YAML 还有一个缺点，就是不支持 @PropertySource 注解导入自定义的 YAML 配置。")])])])])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-是否可以使用-xml-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-是否可以使用-xml-配置"}},[t._v("#")]),t._v(" Spring Boot 是否可以使用 XML 配置 ?")]),t._v(" "),r("ul",[r("li",[t._v("Spring Boot 推荐使用 Java 配置而非 XML 配置，但是 Spring Boot 中也可以使用 XML 配置，通过 @ImportResource 注解可以引入一个 XML 配置。")])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-核心配置文件是什么-bootstrap-properties-和-application-properties-有何区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-核心配置文件是什么-bootstrap-properties-和-application-properties-有何区别"}},[t._v("#")]),t._v(" spring boot 核心配置文件是什么？bootstrap.properties 和 application.properties 有何区别 ?")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("单纯做 Spring Boot 开发，可能不太容易遇到 bootstrap.properties 配置文件，但是在结合 Spring Cloud 时，这个配置就会经常遇到了，特别是在需要加载一些远程配置文件的时侯。")])]),t._v(" "),r("li",[r("p",[t._v("spring boot 核心的两个配置文件：")]),t._v(" "),r("ul",[r("li",[t._v("bootstrap (. yml 或者 . properties)：boostrap 由父 ApplicationContext 加载的，比 applicaton 优先加载，配置在应用程序上下文的引导阶段生效。一般来说我们在 Spring Cloud 配置就会使用这个文件。且 boostrap 里面的属性不能被覆盖；")]),t._v(" "),r("li",[t._v("application (. yml 或者 . properties)： 由ApplicatonContext 加载，用于 spring boot 项目的自动化配置。")])])])]),t._v(" "),r("h3",{attrs:{id:"什么是-spring-profiles"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-profiles"}},[t._v("#")]),t._v(" 什么是 Spring Profiles？")]),t._v(" "),r("ul",[r("li",[t._v("在项目的开发中，有些配置文件在开发、测试或者生产等不同环境中可能是不同的，例如数据库连接、redis的配置等等。那我们如何在不同环境中自动实现配置的切换呢？Spring给我们提供了profiles机制给我们提供的就是来回切换配置文件的功能")]),t._v(" "),r("li",[t._v("Spring Profiles 允许用户根据配置文件（dev，test，prod 等）来注册 bean。因此，当应用程序在开发中运行时，只有某些 bean 可以加载，而在 PRODUCTION中，某些其他 bean 可以加载。假设我们的要求是 Swagger 文档仅适用于 QA 环境，并且禁用所有其他文档。这可以使用配置文件来完成。Spring Boot 使得使用配置文件非常简单。")])]),t._v(" "),r("h3",{attrs:{id:"springboot多数据源拆分的思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot多数据源拆分的思路"}},[t._v("#")]),t._v(" SpringBoot多数据源拆分的思路")]),t._v(" "),r("ul",[r("li",[t._v("先在properties配置文件中配置两个数据源，创建分包mapper，使用@ConfigurationProperties读取properties中的配置，使用@MapperScan注册到对应的mapper包中")])]),t._v(" "),r("h3",{attrs:{id:"springboot多数据源事务如何管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot多数据源事务如何管理"}},[t._v("#")]),t._v(" SpringBoot多数据源事务如何管理")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("第一种方式是在service层的@TransactionManager中使用transactionManager指定DataSourceConfig中配置的事务")])]),t._v(" "),r("li",[r("p",[t._v("第二种是使用jta-atomikos实现分布式事务管理")])])]),t._v(" "),r("h3",{attrs:{id:"保护-spring-boot-应用有哪些方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#保护-spring-boot-应用有哪些方法"}},[t._v("#")]),t._v(" 保护 Spring Boot 应用有哪些方法？")]),t._v(" "),r("ul",[r("li",[t._v("在生产中使用HTTPS")]),t._v(" "),r("li",[t._v("使用Snyk检查你的依赖关系")]),t._v(" "),r("li",[t._v("升级到最新版本")]),t._v(" "),r("li",[t._v("启用CSRF保护")]),t._v(" "),r("li",[t._v("使用内容安全策略防止XSS攻击")])]),t._v(" "),r("h3",{attrs:{id:"如何实现-spring-boot-应用程序的安全性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-spring-boot-应用程序的安全性"}},[t._v("#")]),t._v(" 如何实现 Spring Boot 应用程序的安全性？")]),t._v(" "),r("ul",[r("li",[t._v("为了实现 Spring Boot 的安全性，我们使用 spring-boot-starter-security 依赖项，并且必须添加安全配置。它只需要很少的代码。配置类将必须扩展WebSecurityConfigurerAdapter 并覆盖其方法。")])]),t._v(" "),r("h3",{attrs:{id:"比较一下-spring-security-和-shiro-各自的优缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#比较一下-spring-security-和-shiro-各自的优缺点"}},[t._v("#")]),t._v(" 比较一下 Spring Security 和 Shiro 各自的优缺点 ?")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("由于 Spring Boot 官方提供了大量的非常方便的开箱即用的 Starter ，包括 Spring Security 的 Starter ，使得在 Spring Boot 中使用 Spring Security 变得更加容易，甚至只需要添加一个依赖就可以保护所有的接口，所以，如果是 Spring Boot 项目，一般选择 Spring Security 。当然这只是一个建议的组合，单纯从技术上来说，无论怎么组合，都是没有问题的。Shiro 和 Spring Security 相比，主要有如下一些特点：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Spring Security 是一个重量级的安全管理框架；Shiro 则是一个轻量级的安全管理框架")])]),t._v(" "),r("li",[r("p",[t._v("Spring Security 概念复杂，配置繁琐；Shiro 概念简单、配置简单")])]),t._v(" "),r("li",[r("p",[t._v("Spring Security 功能强大；Shiro 功能简单")])])])])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-中如何解决跨域问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中如何解决跨域问题"}},[t._v("#")]),t._v(" Spring Boot 中如何解决跨域问题 ?")]),t._v(" "),r("ul",[r("li",[t._v("跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请求，在 RESTful 风格的应用中，就显得非常鸡肋，因此我们推荐在后端通过 （CORS，Cross-origin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，现在可以通过实现WebMvcConfigurer接口然后重写addCorsMappings方法解决跨域问题。")])]),t._v(" "),r("div",{staticClass:"language-auto line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('  @Configuration\n  public class CorsConfig implements WebMvcConfigurer {\n\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n          registry.addMapping("/**")\n                  .allowedOrigins("*")\n                  .allowCredentials(true)\n                  .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")\n                  .maxAge(3600);\n      }\n\n  }\n')])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br")])]),r("h3",{attrs:{id:"spring-boot-中的监视器是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中的监视器是什么"}},[t._v("#")]),t._v(" Spring Boot 中的监视器是什么？")]),t._v(" "),r("ul",[r("li",[t._v("Spring boot actuator 是 spring 启动框架中的重要功能之一。Spring boot 监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。有几个指标必须在生产环境中进行检查和监控。即使一些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接作为 HTTP URL 访问的REST 端点来检查状态。")])]),t._v(" "),r("h3",{attrs:{id:"如何使用-spring-boot-实现全局异常处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-spring-boot-实现全局异常处理"}},[t._v("#")]),t._v(" 如何使用 Spring Boot 实现全局异常处理？")]),t._v(" "),r("ul",[r("li",[t._v("Spring 提供了一种使用 ControllerAdvice 处理异常的非常有用的方法。 我们通过实现一个 ControlerAdvice 类，来处理控制器类抛出的所有异常。")])]),t._v(" "),r("h3",{attrs:{id:"我们如何监视所有-spring-boot-微服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#我们如何监视所有-spring-boot-微服务"}},[t._v("#")]),t._v(" 我们如何监视所有 Spring Boot 微服务？")]),t._v(" "),r("ul",[r("li",[t._v("Spring Boot 提供监视器端点以监控各个微服务的度量。这些端点对于获取有关应用程序的信息（如它们是否已启动）以及它们的组件（如数据库等）是否正常运行很有帮助。但是，使用监视器的一个主要缺点或困难是，我们必须单独打开应用程序的知识点以了解其状态或健康状况。想象一下涉及 50 个应用程序的微服务，管理员将不得不击中所有 50 个应用程序的执行终端。为了帮助我们处理这种情况，我们将使用位于的开源项目。 它建立在 Spring Boot Actuator 之上，它提供了一个 Web UI，使我们能够可视化多个应用程序的度量。")])]),t._v(" "),r("h3",{attrs:{id:"springboot性能如何优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot性能如何优化"}},[t._v("#")]),t._v(" SpringBoot性能如何优化")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("如果项目比较大，类比较多，不使用@SpringBootApplication，采用@Compoment指定扫包范围")])]),t._v(" "),r("li",[r("p",[t._v("在项目启动时设置JVM初始内存和最大内存相同")])]),t._v(" "),r("li",[r("p",[t._v("将springboot内置服务器由tomcat设置为undertow")])])]),t._v(" "),r("h3",{attrs:{id:"如何重新加载-spring-boot-上的更改-而无需重新启动服务器-spring-boot项目如何热部署"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何重新加载-spring-boot-上的更改-而无需重新启动服务器-spring-boot项目如何热部署"}},[t._v("#")]),t._v(" 如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？Spring Boot项目如何热部署？")]),t._v(" "),r("ul",[r("li",[t._v("这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。")])]),t._v(" "),r("div",{staticClass:"language-auto line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("<dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-devtools</artifactId>\n</dependency>\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br")])]),r("h3",{attrs:{id:"springboot微服务中如何实现-session-共享"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot微服务中如何实现-session-共享"}},[t._v("#")]),t._v(" SpringBoot微服务中如何实现 session 共享 ?")]),t._v(" "),r("ul",[r("li",[t._v("在微服务中，一个完整的项目被拆分成多个不相同的独立的服务，各个服务独立部署在不同的服务器上，各自的 session 被从物理空间上隔离开了，但是经常，我们需要在不同微服务之间共享 session ，常见的方案就是 Spring Session + Redis 来实现 session 共享。将所有微服务的 session 统一保存在 Redis 上，当各个微服务对 session 有相关的读写操作时，都去操作 Redis 上的 session 。这样就实现了 session 共享，Spring Session 基于 Spring 中的代理过滤器实现，使得 session 的同步操作对开发人员而言是透明的，非常简便。")])]),t._v(" "),r("h3",{attrs:{id:"您使用了哪些-starter-maven-依赖项"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#您使用了哪些-starter-maven-依赖项"}},[t._v("#")]),t._v(" 您使用了哪些 starter maven 依赖项？")]),t._v(" "),r("ul",[r("li",[t._v("使用了下面的一些依赖项\n"),r("ul",[r("li",[t._v("spring-boot-starter-web 嵌入tomcat和web开发需要servlet与jsp支持")]),t._v(" "),r("li",[t._v("spring-boot-starter-data-jpa 数据库支持")]),t._v(" "),r("li",[t._v("spring-boot-starter-data-redis redis数据库支持")]),t._v(" "),r("li",[t._v("spring-boot-starter-data-solr solr支持")]),t._v(" "),r("li",[t._v("mybatis-spring-boot-starter 第三方的mybatis集成starter")]),t._v(" "),r("li",[t._v("自定义的starter(如果自己开发过就可以说出来)")])])])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-中的-starter-到底是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中的-starter-到底是什么"}},[t._v("#")]),t._v(" Spring Boot 中的 starter 到底是什么 ?")]),t._v(" "),r("ul",[r("li",[t._v("首先，这个 Starter 并非什么新的技术点，基本上还是基于 Spring 已有功能来实现的。首先它提供了一个自动化配置类，一般命名为 "),r("code",[t._v("XXXAutoConfiguration")]),t._v(" ，在这个配置类中通过条件注解来决定一个配置是否生效（条件注解就是 Spring 中原本就有的），然后它还会提供一系列的默认配置，也允许开发者根据实际情况自定义相关配置，然后通过类型安全的属性(spring.factories)注入将这些配置属性注入进来，新注入的属性会代替掉默认属性。正因为如此，很多第三方框架，我们只需要引入依赖就可以直接使用了。当然，开发者也可以自定义 Starter")])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-中如何实现定时任务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中如何实现定时任务"}},[t._v("#")]),t._v(" Spring Boot 中如何实现定时任务 ?")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("在 Spring Boot 中使用定时任务主要有两种不同的方式，一个就是使用 Spring 中的 @Scheduled 注解，另一-个则是使用第三方框架 Quartz。")])]),t._v(" "),r("li",[r("p",[t._v("使用 Spring 中的 @Scheduled 的方式主要通过 @Scheduled 注解来实现。")])])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-starter-parent-有什么用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-starter-parent-有什么用"}},[t._v("#")]),t._v(" spring-boot-starter-parent 有什么用 ?")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("我们都知道，新创建一个 Spring Boot 项目，默认都是有 parent 的，这个 parent 就是 spring-boot-starter-parent ，spring-boot-starter-parent 主要有如下作用：")]),t._v(" "),r("ol",[r("li",[t._v("定义了 Java 编译版本为 1.8 。")]),t._v(" "),r("li",[t._v("使用 UTF-8 格式编码。")]),t._v(" "),r("li",[t._v("继承自 spring-boot-dependencies，这个里边定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号。")]),t._v(" "),r("li",[t._v("执行打包操作的配置。")]),t._v(" "),r("li",[t._v("自动化的资源过滤。")]),t._v(" "),r("li",[t._v("自动化的插件配置。")]),t._v(" "),r("li",[t._v("针对 application.properties 和 application.yml 的资源过滤，包括通过 profile 定义的不同环境的配置文件，例如 application-dev.properties 和 application-dev.yml。")])])]),t._v(" "),r("li",[r("p",[t._v("总结就是打包用的")])])]),t._v(" "),r("h3",{attrs:{id:"springboot如何实现打包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot如何实现打包"}},[t._v("#")]),t._v(" SpringBoot如何实现打包")]),t._v(" "),r("ul",[r("li",[t._v("进入项目目录在控制台输入mvn clean package，clean是清空已存在的项目包，package进行打包")]),t._v(" "),r("li",[t._v("或者点击左边选项栏中的Mavne，先点击clean在点击package")])]),t._v(" "),r("h3",{attrs:{id:"spring-boot-打成的-jar-和普通的-jar-有什么区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-打成的-jar-和普通的-jar-有什么区别"}},[t._v("#")]),t._v(" Spring Boot 打成的 jar 和普通的 jar 有什么区别 ?")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Spring Boot 项目最终打包成的 jar 是可执行 jar ，这种 jar 可以直接通过 "),r("code",[t._v("java -jar xxx.jar")]),t._v(" 命令来运行，这种 jar 不可以作为普通的 jar 被其他项目依赖，即使依赖了也无法使用其中的类。")])]),t._v(" "),r("li",[r("p",[t._v("Spring Boot 的 jar 无法被其他项目依赖，主要还是他和普通 jar 的结构不同。普通的 jar 包，解压后直接就是包名，包里就是我们的代码，而 Spring Boot 打包成的可执行 jar 解压后，在 "),r("code",[t._v("\\BOOT-INF\\classes")]),t._v(" 目录下才是我们的代码，因此无法被直接引用。如果非要引用，可以在 pom.xml 文件中增加配置，将 Spring Boot 项目打包成两个 jar ，一个可执行，一个可引用。")])])])])}),[],!1,null,null,null);r.default=i.exports}}]);