(window.webpackJsonp=window.webpackJsonp||[]).push([[527],{1908:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#搜索"}},[t._v("#")]),t._v(" 搜索")]),t._v(" "),s("p",[t._v("无论仓库里的代码量有多少，你经常需要 "),s("strong",[t._v("查找一个函数是在哪里调用或者定义")]),t._v(" 的，或者 "),s("strong",[t._v("一个方法的变更历史")]),t._v("。 Git 提供了两个有用的工具来快速地从它的数据库中浏览代码和提交。 我们来简单的看一下。")]),t._v(" "),s("h2",{attrs:{id:"git-grep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-grep"}},[t._v("#")]),t._v(" Git Grep")]),t._v(" "),s("p",[t._v("Git 提供了一个 grep 命令，你可以很方便地 "),s("strong",[t._v("从提交历史或者工作目录中查找一个字符串或者正则表达式")]),t._v(" 。 我们用 Git 本身源代码的查找作为例子。")]),t._v(" "),s("p",[t._v("默认情况下 Git 会查找你工作目录的文件。 你可以传入 "),s("code",[t._v("-n")]),t._v(" 参数来输出 Git 所找到的匹配行行号。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" gmtime_r\ncompat/gmtime.c:3:"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#undef gmtime_r")]),t._v("\ncompat/gmtime.c:8:      "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" git_gmtime_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timep, "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncompat/gmtime.c:11:struct tm *git_gmtime_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("const time_t *timep, struct tm *result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncompat/gmtime.c:16:     ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gmtime_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timep, result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncompat/mingw.c:606:struct tm *gmtime_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("const time_t *timep, struct tm *result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncompat/mingw.h:162:struct tm *gmtime_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("const time_t *timep, struct tm *result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndate.c:429:             "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gmtime_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("now, "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("now_tm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v("\ndate.c:492:             "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gmtime_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("time, tm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\ngit-compat-util.h:721:struct tm *git_gmtime_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("const time_t *, struct tm *"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ngit-compat-util.h:723:"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define gmtime_r git_gmtime_r")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("注意：需要使用 git 自带的 git bash 命令行使用，才会有完整的搜索记录，使用 idea 中的终端运行这个命令搜索结果基本上不会怎么工作")])]),t._v(" "),s("p",[t._v("grep 命令有一些有趣的选项。")]),t._v(" "),s("p",[t._v("例如，你可以使用 "),s("code",[t._v("–count")]),t._v("  选项来使 Git 输出概述的信息，仅仅包括哪些文件包含匹配以及每个文件包含了多少个匹配。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--count")]),t._v(" gmtime_r\ncompat/gmtime.c:4\ncompat/mingw.c:1\ncompat/mingw.h:1\ndate.c:2\ngit-compat-util.h:2\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("如果你 "),s("strong",[t._v("想看匹配的行是属于哪一个方法或者函数")]),t._v("，你可以传入 "),s("code",[t._v("-p")]),t._v(" 选项：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" gmtime_r *.c\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("date.c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("static int match_multi_number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsigned long num, char c, const char *date, char *end, struct tm *tm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndate.c:         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gmtime_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("now, "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("now_tm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("date.c")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("static int match_digit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("const char *date, struct tm *tm, int *offset, int *tm_gmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndate.c:         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gmtime_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("time, tm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("在这里我们可以看到在 date.c 文件中有 match_multi_number 和 match_digit 两个函数调用了gmtime_r。")]),t._v(" "),s("p",[t._v("你还可以使用 "),s("code",[t._v("–and")]),t._v("  标志来查看复杂的字符串组合，也就是 "),s("strong",[t._v("在同一行同时包含多个匹配")]),t._v("。 比如，我们要查看在旧版本 1.8.0 的 Git 代码库中定义了常量名包含  「LINK」 或者 「BUF_MAX」 这两个字符串所在的行。")]),t._v(" "),s("p",[t._v("这里我们也用到了 "),s("code",[t._v("–break")]),t._v(" 和 "),s("code",[t._v("–heading")]),t._v(" 选项来使输出更加容易阅读。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--break")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--heading")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#define'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" LINK "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" BUF_MAX "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" v1.8.0\nv1.8.0:builtin/index-pack.c\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("62")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define FLAG_LINK (1u<<20)")]),t._v("\n\nv1.8.0:cache.h\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("73")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define S_IFGITLINK  0160000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("74")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)")]),t._v("\n\nv1.8.0:environment.c\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("54")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS")]),t._v("\n\nv1.8.0:strbuf.c\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("326")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define STRBUF_MAXLINK (2*PATH_MAX)")]),t._v("\n\nv1.8.0:symlinks.c\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define FL_SYMLINK  (1 << 2)")]),t._v("\n\nv1.8.0:zlib.c\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v(":/* "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define ZLIB_BUF_MAX ((uInt)-1) */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("p",[t._v("相比于一些常用的搜索命令比如 grep 和 ack，"),s("strong",[s("code",[t._v("git grep")]),t._v(" 命令有一些的优点")]),t._v("。 第一就是速度非常快，第二是你不仅仅可以 "),s("strong",[t._v("可以搜索工作目录")]),t._v("，"),s("strong",[t._v("还可以搜索任意的 Git 树")]),t._v("。 在上一个例子中，我们在一个旧版本的 Git 源代码中查找，而不是当前检出的版本。")]),t._v(" "),s("h2",{attrs:{id:"git-日志搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-日志搜索"}},[t._v("#")]),t._v(" Git 日志搜索")]),t._v(" "),s("p",[t._v("或许你不想知道某一项在 "),s("strong",[t._v("哪里")]),t._v(" ，而是想知道是什么 "),s("strong",[t._v("时候")]),t._v(" 存在或者引入的。 "),s("code",[t._v("git log")]),t._v(" 命令有许多强大的工具可以通过提交信息甚至是 "),s("code",[t._v("diff")]),t._v(" 的内容来找到某个特定的提交。")]),t._v(" "),s("p",[t._v("例如，如果我们想找到 "),s("code",[t._v("ZLIB_BUF_MAX")]),t._v(" 常量是什么时候引入的，我们可以使用  "),s("code",[t._v("-S")]),t._v("  选项来显示新增和删除该字符串的提交。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-SZLIB_BUF_MAX")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v("\ne01503b zlib: allow feeding "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("more")]),t._v(" than 4GB "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" one go\nef49a7a zlib: zlib can only process 4GB at a "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("如果我们查看这些提交的 diff，我们可以看到在 ef49a7a 这个提交引入了常量，并且在 e01503b 这个提交中被修改了。")]),t._v(" "),s("p",[t._v("如果你希望得到更精确的结果，你可以使用 "),s("code",[t._v("-G")]),t._v(" 选项来使用正则表达式搜索。")]),t._v(" "),s("h2",{attrs:{id:"行日志搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行日志搜索"}},[t._v("#")]),t._v(" 行日志搜索")]),t._v(" "),s("p",[t._v("行日志搜索是另一个相当高级并且有用的 "),s("strong",[t._v("日志搜索功能")]),t._v("。 这是一个最近新增的不太知名的功能，但却是十分有用。 在 "),s("code",[t._v("git log")]),t._v("  后加上 "),s("code",[t._v("-L")]),t._v("  选项即可调用，它可以展示代码中一行或者一个函数的历史。")]),t._v(" "),s("p",[t._v("例如，假设我们想查看 zlib.c 文件中 "),s("code",[t._v("git_deflate_bound")]),t._v("  函数的每一次变更，我们可以执行 "),s("code",[t._v("git log -L :git_deflate_bound:zlib.c")]),t._v("。 Git 会尝试找出这个函数的范围，然后查找历史记录，并且显示从函数创建之后一系列变更对应的补丁。")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-L")]),t._v(" :git_deflate_bound:zlib.c\ncommit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca\nAuthor: Junio C Hamano "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("gitster@pobox.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Fri Jun "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(":52:15 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2011")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-0700")]),t._v("\n\n    zlib: zlib can only process 4GB at a "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--git")]),t._v(" a/zlib.c b/zlib.c\n--- a/zlib.c\n+++ b/zlib.c\n@@ -85,5 +130,5 @@\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-unsigned")]),t._v(" long git_deflate_bound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z_streamp strm, unsigned long size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n+unsigned long git_deflate_bound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("git_zstream *strm, unsigned long size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n-       "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" deflateBound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strm, size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n+       "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" deflateBound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("strm-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("z, size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\ncommit 225a6f1068f71723a910e8565db4e252b3ca21fa\nAuthor: Junio C Hamano "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("gitster@pobox.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Fri Jun "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(":18:17 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2011")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-0700")]),t._v("\n\n    zlib: wrap deflateBound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" too\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--git")]),t._v(" a/zlib.c b/zlib.c\n--- a/zlib.c\n+++ b/zlib.c\n@@ -81,0 +85,5 @@\n+unsigned long git_deflate_bound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z_streamp strm, unsigned long size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n+       "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" deflateBound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strm, size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n+\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br")])]),s("p",[t._v("如果 Git 无法计算出如何匹配你代码中的函数或者方法，你可以提供一个正则表达式。 例如，这个命令和上面的是等同的："),s("code",[t._v("git log -L ‘/unsigned long git_deflate_bound/’,/^}/:zlib.c")]),t._v(" 。 你也可以提供单行或者一个范围的行号来获得相同的输出。")])])}),[],!1,null,null,null);s.default=e.exports}}]);