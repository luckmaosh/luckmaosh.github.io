(window.webpackJsonp=window.webpackJsonp||[]).push([[353],{1649:function(e,n,t){"use strict";t.r(n);var v=t(5),r=Object(v.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_189-商品详情页-oneservice-系统-请求预处理功能设计介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_189-商品详情页-oneservice-系统-请求预处理功能设计介绍"}},[e._v("#")]),e._v(" 189. 商品详情页 OneService 系统：请求预处理功能设计介绍")]),e._v(" "),n("p",[e._v("我这么跟大家说，我们是不可能完全真实的开发出一个完整业务的 OneService 系统的，\n因为那样做的话，需要构建出来大量的各种各样的依赖服务，才能将这个业务场景模拟出来，没必要")]),e._v(" "),n("p",[e._v("我这边，把一个基本的 OenService 系统的架子，基于 spring cloud 做出来，大家就能体验到一个完整的架构是怎么做的，\n至于里面一些具体的业务，就由我来给大家说明和介绍一下就可以了")]),e._v(" "),n("p",[n("strong",[e._v("什么是请求预处理？")]),e._v(" 先做一些简单的，薄薄的一层的封装和代理，先做点业务逻辑的判断和处理")]),e._v(" "),n("p",[e._v("请求预处理可做的事情有：")]),e._v(" "),n("ul",[n("li",[e._v("比如库存状态（有货/无货）的转换，第三方运费的处理，第三方配送时效（多少天发货）的处理")]),e._v(" "),n("li",[e._v("处理主商品与配件关系，比如说 iphone 可能就搭载着耳机，充电器，等等")]),e._v(" "),n("li",[e._v("商家运费动态计算，等等")])]),e._v(" "),n("p",[e._v("这样的话，就可以给后端的服务传递更多的参数，或者简化后端服务的计算逻辑")])])}),[],!1,null,null,null);n.default=r.exports}}]);