(window.webpackJsonp=window.webpackJsonp||[]).push([[504],{1865:function(t,e,a){"use strict";a.r(e);var n=a(5),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"查看提交历史"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看提交历史"}},[t._v("#")]),t._v(" 查看提交历史")]),t._v(" "),e("p",[t._v("在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 git log 命令。")]),t._v(" "),e("p",[t._v("接下来的例子会用我专门用于演示的 simplegit 项目， 运行下面的命令获取该项目源代码：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone https://github.com/schacon/simplegit-progit\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("然后在此项目中运行 git log，应该会看到下面的输出：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git log\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 16:40:33 2008 -0700\n\n    removed unnecessary test\n\ncommit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 10:31:28 2008 -0700\n\n    first commit\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br")])]),e("p",[t._v("默认不用任何参数的话，git log 会按 "),e("strong",[t._v("提交时间列出所有的更新")]),t._v("，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 "),e("strong",[t._v("SHA-1 校验和")]),t._v("、"),e("strong",[t._v("作者的名字")]),t._v(" 和 "),e("strong",[t._v("电子邮件地址")]),t._v("、"),e("strong",[t._v("提交时间")]),t._v(" 以及 "),e("strong",[t._v("提交说明")]),t._v("。")]),t._v(" "),e("p",[t._v("git log 有许多选项可以帮助你搜寻你所要找的提交， 接下来我们介绍些最常用的。")]),t._v(" "),e("h2",{attrs:{id:"显示每次提交的内容差异-p"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显示每次提交的内容差异-p"}},[t._v("#")]),t._v(" 显示每次提交的内容差异 "),e("code",[t._v("-p")])]),t._v(" "),e("p",[t._v("一个常用的选项是 "),e("strong",[t._v("-p")]),t._v("，用来 "),e("strong",[t._v("显示每次提交的内容差异")]),t._v("。 你也可以加上 -2 来仅显示最近两次提交：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git log -p -2\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\ndiff --git a/Rakefile b/Rakefile\nindex a874b73..8f94139 100644\n--- a/Rakefile\n+++ b/Rakefile\n@@ -5,7 +5,7 @@ require \'rake/gempackagetask\'\n spec = Gem::Specification.new do |s|\n     s.platform  =   Gem::Platform::RUBY\n     s.name      =   "simplegit"\n-    s.version   =   "0.1.0"\n+    s.version   =   "0.1.1"\n     s.author    =   "Scott Chacon"\n     s.email     =   "schacon@gee-mail.com"\n     s.summary   =   "A simple gem for using Git in Ruby code."\n\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 16:40:33 2008 -0700\n\n    removed unnecessary test\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex a0a60ae..47c6340 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -18,8 +18,3 @@ class SimpleGit\n     end\n\n end\n-\n-if $0 == __FILE__\n-  git = SimpleGit.new\n-  puts git.show\n-end\n\\ No newline at end of file\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br"),e("span",{staticClass:"line-number"},[t._v("40")]),e("br"),e("span",{staticClass:"line-number"},[t._v("41")]),e("br")])]),e("p",[t._v("该选项除了显示基本信息之外，还附带了 "),e("strong",[t._v("每次 commit 的变化")]),t._v("。 当进行代码审查，或者快速浏览某个搭档提交的 commit 所带来的变化的时候，这个参数就非常有用了。")]),t._v(" "),e("h2",{attrs:{id:"显示简略的统计信息-stat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显示简略的统计信息-stat"}},[t._v("#")]),t._v(" 显示简略的统计信息 "),e("code",[t._v("--stat")])]),t._v(" "),e("p",[t._v("你也可以为 git log 附带一系列的总结性选项。 比如说，如果你想看到每次提交的 "),e("strong",[t._v("简略的统计信息")]),t._v("，你可以使用 "),e("strong",[t._v("--stat")]),t._v(" 选项：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git log --stat\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\n Rakefile | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 16:40:33 2008 -0700\n\n    removed unnecessary test\n\n lib/simplegit.rb | 5 -----\n 1 file changed, 5 deletions(-)\n\ncommit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 10:31:28 2008 -0700\n\n    first commit\n\n README           |  6 ++++++\n Rakefile         | 23 +++++++++++++++++++++++\n lib/simplegit.rb | 25 +++++++++++++++++++++++++\n 3 files changed, 54 insertions(+)\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br")])]),e("p",[t._v("正如你所看到的，–stat 选项在每次提交的下面 "),e("strong",[t._v("列出额所有被修改过的文件")]),t._v("、"),e("strong",[t._v("有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了")]),t._v("。 在每次提交的最后"),e("strong",[t._v("还有一个总结")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"以不同格式展示历史信息-pretty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#以不同格式展示历史信息-pretty"}},[t._v("#")]),t._v(" 以不同格式展示历史信息 "),e("code",[t._v("--pretty")])]),t._v(" "),e("p",[t._v("另外一个常用的选项是 –pretty。 这个选项可以指定使用不同于默认格式的方式展示提交历史。 这个选项有一些内建的子选项供你使用。 比如用 oneline 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有 short，full 和 fuller 可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git log --pretty=oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("但最有意思的是 "),e("strong",[t._v("format")]),t._v("，"),e("strong",[t._v("可以定制要显示的记录格式")]),t._v("。 这样的输出对后期提取分析格外有用 — 因为你知道输出的格式不会随着 Git 的更新而发生改变：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git log --pretty=format:"%h - %an, %ar : %s"\nca82a6d - Scott Chacon, 6 years ago : changed the version number\n085bb3b - Scott Chacon, 6 years ago : removed unnecessary test\na11bef0 - Scott Chacon, 6 years ago : first commit\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("下表列出了常用的格式占位符写法及其代表的意义：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("选项")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%H")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("提交对象（commit）的完整哈希字串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%h")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("提交对象的简短哈希字串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("树对象（tree）的完整哈希字串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%t")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("树对象的简短哈希字串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%P")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("父对象（parent）的完整哈希字串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%p")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("父对象的简短哈希字串")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%an")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("作者（author）的名字")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%ae")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("作者的电子邮件地址")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%ad")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("作者修订日期（可以用 –date= 选项定制格式）")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%ar")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("作者修订日期，按多久以前的方式显示")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%cn")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("提交者（committer）的名字")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%ce")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("提交者的电子邮件地址")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%cd")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("提交日期")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%cr")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("提交日期，按多久以前的方式显示")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("%s")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("提交说明")])])])]),t._v(" "),e("p",[t._v("你一定奇怪 "),e("em",[t._v("作者")]),t._v(" 和 "),e("em",[t._v("提交者")]),t._v(" 之间究竟有何差别， 其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。 所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。 我们会在 "),e("a",{attrs:{href:"https://git-scm.com/book/zh/v2/ch00/_distributed_git",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式 Git"),e("OutboundLink")],1),t._v(" 再详细介绍两者之间的细微差别。")]),t._v(" "),e("h2",{attrs:{id:"使用-ascii-字符串来形象地展示你的分支、合并历史-graph"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-ascii-字符串来形象地展示你的分支、合并历史-graph"}},[t._v("#")]),t._v(" 使用 ASCII 字符串来形象地展示你的分支、合并历史 "),e("code",[t._v("–-graph")])]),t._v(" "),e("p",[t._v("当 oneline 或 format 与另一个 log 选项 –graph 结合使用时尤其有用。 这个选项添加了一些 ASCII 字符串来形象地展示你的分支、合并历史：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git log --pretty=format:\"%h %s\" --graph\n* 2d3acf9 ignore errors from SIGCHLD on trap\n*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 Added a method for getting the current branch.\n* | 30e367c timeout code and tests\n* | 5a09431 add timeout protection to grit\n* | e1193f8 support for heads with slashes in them\n|/\n* d6016bc require time for xmlschema\n*  11d191e Merge branch 'defunkt' into local\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("这种输出类型会在我们下一章学完分支与合并以后变得更加有趣。")]),t._v(" "),e("h2",{attrs:{id:"常用选项汇总"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用选项汇总"}},[t._v("#")]),t._v(" 常用选项汇总")]),t._v(" "),e("p",[t._v("以上只是简单介绍了一些 git log 命令支持的选项。下面列出了我们目前涉及到的和没涉及到的选项，以及它们是如何影响 log 命令的输出的：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("选项")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("-p")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("按补丁格式显示每个更新之间的差异。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–stat")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("显示每次更新的文件修改统计信息。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–shortstat")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("只显示 –stat 中最后的行数修改添加移除统计。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–name-only")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅在提交信息后显示已修改的文件清单。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–name-status")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("显示新增、修改、删除的文件清单。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–abbrev-commit")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–relative-date")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("使用较短的相对时间显示（比如，“2 weeks ago”）。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–graph")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("显示 ASCII 图形表示的分支合并历史。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–pretty")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。")])])])]),t._v(" "),e("h2",{attrs:{id:"限制输出长度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#限制输出长度"}},[t._v("#")]),t._v(" 限制输出长度")]),t._v(" "),e("p",[t._v("除了定制输出格式的选项之外，git log 还有许多非常实用的限制输出长度的选项，也就是 "),e("strong",[t._v("只输出部分提交信息")]),t._v("。 之前你已经看到过 -2 了，它只显示最近的两条提交， 实际上，这是 "),e("code",[t._v("-<n>")]),t._v(" 选项的写法，其中的 n 可以是任何整数，表示仅显示最近的若干条提交。 不过实践中我们是不太用这个选项的，Git 在输出所有提交时会自动调用分页程序，所以你一次只会看到一页的内容。")]),t._v(" "),e("p",[t._v("另外还有 "),e("strong",[t._v("按照时间作限制")]),t._v(" 的选项，比如 –since 和 –until 也很有用。 例如，下面的命令列出所有最近两周内的提交：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git log --since=2.weeks\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("这个命令可以在多种格式下工作，比如说具体的 "),e("strong",[t._v("某一天")]),t._v(" “2008-01-15″，或者是 "),e("strong",[t._v("相对地多久以前")]),t._v(" “2 years 1 day 3 minutes ago”。")]),t._v(" "),e("p",[t._v("还可以给出若干搜索条件，列出符合的提交。 用 –author 选项显示指定作者的提交，用 –grep 选项搜索提交说明中的关键字。 （请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 –all-match 选项。否则，满足任意一个条件的提交都会被匹配出来）")]),t._v(" "),e("p",[t._v("另一个非常有用的筛选选项是 -S，可以列出那些添加或移除了某些字符串的提交。 比如说，你想找出添加或移除了某一个特定函数的引用的提交，你可以这样使用：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git log -Sfunction_name\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("最后一个很实用的 git log 选项是路径（path）， 如果只关心某些文件或者目录的历史提交，可以在 git log 选项的最后指定它们的路径。 因为是放在最后位置上的选项，所以用两个短划线（–）隔开之前的选项和后面限定的路径名。")]),t._v(" "),e("p",[t._v("下面是限制输出长度的常用选项：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("选项")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("-(n)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅显示最近的 n 条提交")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–since, –after")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅显示指定时间之后的提交。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–until, –before")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅显示指定时间之前的提交。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–author")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅显示指定作者相关的提交。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–committer")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅显示指定提交者相关的提交。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("–grep")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅显示含指定关键字的提交")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("-S")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("仅显示添加或移除了某个关键字的提交")])])])]),t._v(" "),e("p",[t._v("来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试文件，可以用下面的查询命令：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \\\n   --before="2008-11-01" --no-merges -- t/\n5610e3b - Fix testcase failure when extended attributes are in use\nacd3b9e - Enhance hold_lock_file_for_{update,append}() API\nf563754 - demonstrate breakage of detached checkout with symbolic link HEAD\nd1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths\n51a94af - Fix "checkout --track -b newbranch" on detached HEAD\nb0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("在近 40000 条提交中，上面的输出仅列出了符合条件的 6 条记录。")]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("git log")]),t._v(" 按提交时间列出所有的更新，最近的更新排在最上面（倒序）")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("-p")]),t._v("：显示每次提交的内容差异")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("-数字")]),t._v("：显示最近 n 次提交")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("--stat")]),t._v("：简略统计信息")]),t._v(" "),e("p",[t._v("在每次提交的下面 "),e("strong",[t._v("列出额所有被修改过的文件")]),t._v("、"),e("strong",[t._v("有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了")]),t._v("。 在每次提交的最后"),e("strong",[t._v("还有一个总结")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("--pretty")]),t._v("：使用不同格式展示提交历史")]),t._v(" "),e("ul",[e("li",[t._v("oneline：将每个提交放在一行显示，查看的提交数很大时非常有用；显示 commit id、提交的备注信息")]),t._v(" "),e("li",[t._v("short：显示 commit id、author、提交的备注信息")]),t._v(" "),e("li",[t._v("full ：显示 commit id、author、commit、提交的备注信息")]),t._v(" "),e("li",[t._v("fuller ：显示 commit id、author、authorDate、commit、commitDate、提交的备注信息")]),t._v(" "),e("li",[t._v("format：自定义显示格式")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);