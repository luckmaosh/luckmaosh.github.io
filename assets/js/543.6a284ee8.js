(window.webpackJsonp=window.webpackJsonp||[]).push([[543],{1926:function(t,s,e){"use strict";e.r(s);var v=e(5),n=Object(v.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"底层命令和高层命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#底层命令和高层命令"}},[t._v("#")]),t._v(" 底层命令和高层命令")]),t._v(" "),s("p",[t._v("本书旨在讨论如何通过 "),s("code",[t._v("checkout")]),t._v("、"),s("code",[t._v("branch")]),t._v("、"),s("code",[t._v("remote")]),t._v(" 等大约 30 个诸如此类动词形式的命令来玩转 Git。 然而，由于 Git 最初是一套面向版本控制系统的工具集，而不是一个完整的、用户友好的版本控制系统，所以它 "),s("strong",[t._v("还包含了一部分用于完成底层工作的命令")]),t._v("。 这些命令被设计成能以 UNIX 命令行的风格连接在一起，抑或藉由脚本调用，来完成工作。 这部分命令一般被称作 "),s("strong",[t._v("底层（plumbing）命令")]),t._v("，而那些更友好的命令则被称作 "),s("strong",[t._v("高层（porcelain） 命令")]),t._v("。")]),t._v(" "),s("p",[t._v("本书前九章专注于探讨高层命令。 然而在本章，我们将主要面对底层命令。 因为，底层命令得以让你窥探 Git 内部的工作机制，也有助于说明 Git 是如何完成工作的，以及它为何如此运作。 多数底层命令并不面向最终用户：它们更适合作为新命令和自定义脚本的组成部分。")]),t._v(" "),s("p",[t._v("当在一个新目录或已有目录执行 "),s("code",[t._v("git init")]),t._v("  时，Git 会创建一个 "),s("code",[t._v(".git")]),t._v(" 目录。 "),s("strong",[t._v("这个目录包含了几乎所有 Git 存储和操作的对象")]),t._v("。 如若想备份或复制一个版本库，只需把这个目录拷贝至另一处即可。 本章探讨的所有内容，均位于这个目录内。 该目录的结构如下所示：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-F1")]),t._v("\nHEAD\nconfig*\ndescription\nhooks/\ninfo/\nobjects/\nrefs/\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("该目录下可能还会包含其他文件，不过对于一个全新的 "),s("code",[t._v("git init")]),t._v("  版本库，这将是你看到的默认结构。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("description")]),t._v(" 文件：仅供 GitWeb 程序使用，我们无需关心。")]),t._v(" "),s("li",[s("code",[t._v("config")]),t._v(" 文件包：含项目特有的配置选项。")]),t._v(" "),s("li",[s("code",[t._v("info")]),t._v(" 目录：包含一个全局性排除（global exclude）文件，用以放置那些不希望被记录在 "),s("code",[t._v(".gitignore")]),t._v(" 文件中的忽略模式（ignored patterns）。")]),t._v(" "),s("li",[s("code",[t._v("hooks")]),t._v(" 目录：包含客户端或服务端的钩子脚本（hook scripts），在 "),s("RouterLink",{attrs:{to:"/git-scm/08/03.html"}},[t._v("Git 钩子")]),t._v(" 中这部分话题已被详细探讨过。")],1)]),t._v(" "),s("p",[t._v("剩下的四个条目很重要：这些条目是 Git 的核心组成部分")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("HEAD")]),t._v(" 文件：指示目前被检出的分支")]),t._v(" "),s("li",[t._v("（尚待创建的）"),s("code",[t._v("index")]),t._v(" 文件：保存暂存区信息")]),t._v(" "),s("li",[s("code",[t._v("objects")]),t._v(" 目录：存储所有数据内容")]),t._v(" "),s("li",[s("code",[t._v("refs")]),t._v(" 目录：存储指向数据（分支）的提交对象的指针；")])]),t._v(" "),s("p",[t._v("我们将详细地逐一检视这四部分，以期理解 Git 是如何运转的。")])])}),[],!1,null,null,null);s.default=n.exports}}]);